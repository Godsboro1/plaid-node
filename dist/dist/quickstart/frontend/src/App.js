"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Headers_1 = __importDefault(require("./Components/Headers"));
const Products_1 = __importDefault(require("./Components/ProductTypes/Products"));
const Items_1 = __importDefault(require("./Components/ProductTypes/Items"));
const Context_1 = __importDefault(require("./Context"));
const App_module_scss_1 = __importDefault(require("./App.module.scss"));
const App = () => {
    const { linkSuccess, isItemAccess, isPaymentInitiation, dispatch } = react_1.useContext(Context_1.default);
    const getInfo = react_1.useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield fetch("/api/info", { method: "POST" });
        if (!response.ok) {
            dispatch({ type: "SET_STATE", state: { backend: false } });
            return { paymentInitiation: false };
        }
        const data = yield response.json();
        const paymentInitiation = data.products.includes("payment_initiation");
        dispatch({
            type: "SET_STATE",
            state: {
                products: data.products,
                isPaymentInitiation: paymentInitiation,
            },
        });
        return { paymentInitiation };
    }), [dispatch]);
    const generateToken = react_1.useCallback((isPaymentInitiation) => __awaiter(void 0, void 0, void 0, function* () {
        // Link tokens for 'payment_initiation' use a different creation flow in your backend.
        const path = isPaymentInitiation
            ? "/api/create_link_token_for_payment"
            : "/api/create_link_token";
        const response = yield fetch(path, {
            method: "POST",
        });
        if (!response.ok) {
            dispatch({ type: "SET_STATE", state: { linkToken: null } });
            return;
        }
        const data = yield response.json();
        if (data) {
            if (data.error != null) {
                dispatch({
                    type: "SET_STATE",
                    state: {
                        linkToken: null,
                        linkTokenError: data.error,
                    },
                });
                return;
            }
            dispatch({ type: "SET_STATE", state: { linkToken: data.link_token } });
        }
        // Save the link_token to be used later in the Oauth flow.
        localStorage.setItem("link_token", data.link_token);
    }), [dispatch]);
    react_1.useEffect(() => {
        const init = () => __awaiter(void 0, void 0, void 0, function* () {
            const { paymentInitiation } = yield getInfo(); // used to determine which path to take when generating token
            // do not generate a new token for OAuth redirect; instead
            // setLinkToken from localStorage
            if (window.location.href.includes("?oauth_state_id=")) {
                dispatch({
                    type: "SET_STATE",
                    state: {
                        linkToken: localStorage.getItem("link_token"),
                    },
                });
                return;
            }
            generateToken(paymentInitiation);
        });
        init();
    }, [dispatch, generateToken, getInfo]);
    return (<div className={App_module_scss_1.default.App}>
      <div className={App_module_scss_1.default.container}>
        <Headers_1.default />
        {linkSuccess && (<>
            {isPaymentInitiation && (<Products_1.default />)}
            {isItemAccess && (<>
                <Products_1.default />
                <Items_1.default />
              </>)}
          </>)}
      </div>
    </div>);
};
exports.default = App;
//# sourceMappingURL=data:application/json;base64,