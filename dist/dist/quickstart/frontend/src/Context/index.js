"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickstartProvider = void 0;
const react_1 = require("react");
const initialState = {
    linkSuccess: false,
    isItemAccess: true,
    isPaymentInitiation: false,
    linkToken: "",
    accessToken: null,
    itemId: null,
    isError: false,
    backend: true,
    products: ["transactions"],
    linkTokenError: {
        error_type: "",
        error_code: "",
        error_message: "",
    },
};
const Context = react_1.createContext(initialState);
const { Provider } = Context;
const QuickstartProvider = (props) => {
    const reducer = (state, action) => {
        switch (action.type) {
            case "SET_STATE":
                return Object.assign(Object.assign({}, state), action.state);
            default:
                return Object.assign({}, state);
        }
    };
    const [state, dispatch] = react_1.useReducer(reducer, initialState);
    return <Provider value={Object.assign(Object.assign({}, state), { dispatch })}>{props.children}</Provider>;
};
exports.QuickstartProvider = QuickstartProvider;
exports.default = Context;
//# sourceMappingURL=data:application/json;base64,