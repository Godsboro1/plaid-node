"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Endpoint_1 = __importDefault(require("../Endpoint"));
const ProductTypesContainer_1 = __importDefault(require("./ProductTypesContainer"));
const dataUtilities_1 = require("../../dataUtilities");
const Items = () => (<>
    <ProductTypesContainer_1.default productType="Item Management">
      <Endpoint_1.default endpoint="item" categories={dataUtilities_1.itemCategories} schema="/item/get/" description="Retrieve information about an Item, like the institution,
        billed products, available products, and webhook
        information." transformData={dataUtilities_1.transformItemData}/>
      <Endpoint_1.default endpoint="accounts" schema="/accounts/get" categories={dataUtilities_1.accountsCategories} description="Retrieve high-level information about all accounts associated with an item." transformData={dataUtilities_1.transformAccountsData}/>
    </ProductTypesContainer_1.default>
  </>);
Items.displayName = "Items";
exports.default = Items;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9xdWlja3N0YXJ0L2Zyb250ZW5kL3NyYy9Db21wb25lbnRzL1Byb2R1Y3RUeXBlcy9JdGVtcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxHQUFHO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsRCxNQUFNLFVBQVUsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDM0QsTUFBTSx1QkFBdUIsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztBQUNwRixNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUN2RCxNQUFNLEtBQUssR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ2pCO0lBQUEsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUM1RDtNQUFBLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQzs7cUJBRWpHLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEVBQ2pFO01BQUEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLENBQUMsNkVBQTZFLENBQUMsYUFBYSxDQUFDLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEVBQ2hRO0lBQUEsRUFBRSx1QkFBdUIsQ0FBQyxPQUFPLENBQ25DO0VBQUEsR0FBRyxDQUFDLENBQUM7QUFDUCxLQUFLLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztBQUM1QixPQUFPLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgRW5kcG9pbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRW5kcG9pbnRcIikpO1xuY29uc3QgUHJvZHVjdFR5cGVzQ29udGFpbmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUHJvZHVjdFR5cGVzQ29udGFpbmVyXCIpKTtcbmNvbnN0IGRhdGFVdGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9kYXRhVXRpbGl0aWVzXCIpO1xuY29uc3QgSXRlbXMgPSAoKSA9PiAoPD5cbiAgICA8UHJvZHVjdFR5cGVzQ29udGFpbmVyXzEuZGVmYXVsdCBwcm9kdWN0VHlwZT1cIkl0ZW0gTWFuYWdlbWVudFwiPlxuICAgICAgPEVuZHBvaW50XzEuZGVmYXVsdCBlbmRwb2ludD1cIml0ZW1cIiBjYXRlZ29yaWVzPXtkYXRhVXRpbGl0aWVzXzEuaXRlbUNhdGVnb3JpZXN9IHNjaGVtYT1cIi9pdGVtL2dldC9cIiBkZXNjcmlwdGlvbj1cIlJldHJpZXZlIGluZm9ybWF0aW9uIGFib3V0IGFuIEl0ZW0sIGxpa2UgdGhlIGluc3RpdHV0aW9uLFxuICAgICAgICBiaWxsZWQgcHJvZHVjdHMsIGF2YWlsYWJsZSBwcm9kdWN0cywgYW5kIHdlYmhvb2tcbiAgICAgICAgaW5mb3JtYXRpb24uXCIgdHJhbnNmb3JtRGF0YT17ZGF0YVV0aWxpdGllc18xLnRyYW5zZm9ybUl0ZW1EYXRhfS8+XG4gICAgICA8RW5kcG9pbnRfMS5kZWZhdWx0IGVuZHBvaW50PVwiYWNjb3VudHNcIiBzY2hlbWE9XCIvYWNjb3VudHMvZ2V0XCIgY2F0ZWdvcmllcz17ZGF0YVV0aWxpdGllc18xLmFjY291bnRzQ2F0ZWdvcmllc30gZGVzY3JpcHRpb249XCJSZXRyaWV2ZSBoaWdoLWxldmVsIGluZm9ybWF0aW9uIGFib3V0IGFsbCBhY2NvdW50cyBhc3NvY2lhdGVkIHdpdGggYW4gaXRlbS5cIiB0cmFuc2Zvcm1EYXRhPXtkYXRhVXRpbGl0aWVzXzEudHJhbnNmb3JtQWNjb3VudHNEYXRhfS8+XG4gICAgPC9Qcm9kdWN0VHlwZXNDb250YWluZXJfMS5kZWZhdWx0PlxuICA8Lz4pO1xuSXRlbXMuZGlzcGxheU5hbWUgPSBcIkl0ZW1zXCI7XG5leHBvcnRzLmRlZmF1bHQgPSBJdGVtcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVNYUmxiWE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTh1TGk4dUxpOXhkV2xqYTNOMFlYSjBMMlp5YjI1MFpXNWtMM055WXk5RGIyMXdiMjVsYm5SekwxQnliMlIxWTNSVWVYQmxjeTlKZEdWdGN5NTBjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRU3hyUkVGQk1FSTdRVUZGTVVJc01rUkJRVzFETzBGQlEyNURMRzlHUVVFMFJEdEJRVU0xUkN4MVJFRkxOa0k3UVVGRk4wSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGRGJFSXNSVUZEUlR0SlFVRkJMRU5CUVVNc0swSkJRWEZDTEVOQlFVTXNWMEZCVnl4RFFVRkRMR2xDUVVGcFFpeERRVU5zUkR0TlFVRkJMRU5CUVVNc2EwSkJRVkVzUTBGRFVDeFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVTm1MRlZCUVZVc1EwRkJReXhEUVVGRExEaENRVUZqTEVOQlFVTXNRMEZETTBJc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGRGJrSXNWMEZCVnl4RFFVRkRPenR4UWtGRlF5eERRVU5pTEdGQlFXRXNRMEZCUXl4RFFVRkRMR2xEUVVGcFFpeERRVUZETEVWQlJXNURPMDFCUVVFc1EwRkJReXhyUWtGQlVTeERRVU5RTEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUTI1Q0xFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlEzUkNMRlZCUVZVc1EwRkJReXhEUVVGRExHdERRVUZyUWl4RFFVRkRMRU5CUXk5Q0xGZEJRVmNzUTBGQlF5dzJSVUZCTmtVc1EwRkRla1lzWVVGQllTeERRVUZETEVOQlFVTXNjVU5CUVhGQ0xFTkJRVU1zUlVGRmVrTTdTVUZCUVN4RlFVRkZMQ3RDUVVGeFFpeERRVU42UWp0RlFVRkJMRWRCUVVjc1EwRkRTaXhEUVVGRE8wRkJSVVlzUzBGQlN5eERRVUZETEZkQlFWY3NSMEZCUnl4UFFVRlBMRU5CUVVNN1FVRkZOVUlzYTBKQlFXVXNTMEZCU3l4RFFVRkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRkpsWVdOMElHWnliMjBnWENKeVpXRmpkRndpTzF4dVhHNXBiWEJ2Y25RZ1JXNWtjRzlwYm5RZ1puSnZiU0JjSWk0dUwwVnVaSEJ2YVc1MFhDSTdYRzVwYlhCdmNuUWdVSEp2WkhWamRGUjVjR1Z6UTI5dWRHRnBibVZ5SUdaeWIyMGdYQ0l1TDFCeWIyUjFZM1JVZVhCbGMwTnZiblJoYVc1bGNsd2lPMXh1YVcxd2IzSjBJSHRjYmlBZ2RISmhibk5tYjNKdFNYUmxiVVJoZEdFc1hHNGdJSFJ5WVc1elptOXliVUZqWTI5MWJuUnpSR0YwWVN4Y2JpQWdhWFJsYlVOaGRHVm5iM0pwWlhNc1hHNGdJR0ZqWTI5MWJuUnpRMkYwWldkdmNtbGxjeXhjYm4wZ1puSnZiU0JjSWk0dUx5NHVMMlJoZEdGVmRHbHNhWFJwWlhOY0lqdGNibHh1WTI5dWMzUWdTWFJsYlhNZ1BTQW9LU0E5UGlBb1hHNGdJRHcrWEc0Z0lDQWdQRkJ5YjJSMVkzUlVlWEJsYzBOdmJuUmhhVzVsY2lCd2NtOWtkV04wVkhsd1pUMWNJa2wwWlcwZ1RXRnVZV2RsYldWdWRGd2lQbHh1SUNBZ0lDQWdQRVZ1WkhCdmFXNTBYRzRnSUNBZ0lDQWdJR1Z1WkhCdmFXNTBQVndpYVhSbGJWd2lYRzRnSUNBZ0lDQWdJR05oZEdWbmIzSnBaWE05ZTJsMFpXMURZWFJsWjI5eWFXVnpmVnh1SUNBZ0lDQWdJQ0J6WTJobGJXRTlYQ0l2YVhSbGJTOW5aWFF2WENKY2JpQWdJQ0FnSUNBZ1pHVnpZM0pwY0hScGIyNDlYQ0pTWlhSeWFXVjJaU0JwYm1admNtMWhkR2x2YmlCaFltOTFkQ0JoYmlCSmRHVnRMQ0JzYVd0bElIUm9aU0JwYm5OMGFYUjFkR2x2Yml4Y2JpQWdJQ0FnSUNBZ1ltbHNiR1ZrSUhCeWIyUjFZM1J6TENCaGRtRnBiR0ZpYkdVZ2NISnZaSFZqZEhNc0lHRnVaQ0IzWldKb2IyOXJYRzRnSUNBZ0lDQWdJR2x1Wm05eWJXRjBhVzl1TGx3aVhHNGdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJVUmhkR0U5ZTNSeVlXNXpabTl5YlVsMFpXMUVZWFJoZlZ4dUlDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUR4RmJtUndiMmx1ZEZ4dUlDQWdJQ0FnSUNCbGJtUndiMmx1ZEQxY0ltRmpZMjkxYm5SelhDSmNiaUFnSUNBZ0lDQWdjMk5vWlcxaFBWd2lMMkZqWTI5MWJuUnpMMmRsZEZ3aVhHNGdJQ0FnSUNBZ0lHTmhkR1ZuYjNKcFpYTTllMkZqWTI5MWJuUnpRMkYwWldkdmNtbGxjMzFjYmlBZ0lDQWdJQ0FnWkdWelkzSnBjSFJwYjI0OVhDSlNaWFJ5YVdWMlpTQm9hV2RvTFd4bGRtVnNJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJR0ZzYkNCaFkyTnZkVzUwY3lCaGMzTnZZMmxoZEdWa0lIZHBkR2dnWVc0Z2FYUmxiUzVjSWx4dUlDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xRVlYUmhQWHQwY21GdWMyWnZjbTFCWTJOdmRXNTBjMFJoZEdGOVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUR3dlVISnZaSFZqZEZSNWNHVnpRMjl1ZEdGcGJtVnlQbHh1SUNBOEx6NWNiaWs3WEc1Y2JrbDBaVzF6TG1ScGMzQnNZWGxPWVcxbElEMGdYQ0pKZEdWdGMxd2lPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JKZEdWdGN6dGNiaUpkZlE9PSJdfQ==