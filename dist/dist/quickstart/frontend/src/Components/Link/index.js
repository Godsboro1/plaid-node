"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_plaid_link_1 = require("react-plaid-link");
const Button_1 = __importDefault(require("plaid-threads/Button"));
const Context_1 = __importDefault(require("../../Context"));
const Link = () => {
    const { linkToken, isPaymentInitiation, dispatch } = react_1.useContext(Context_1.default);
    const onSuccess = react_1.default.useCallback((public_token) => {
        // If the access_token is needed, send public_token to server
        const exchangePublicTokenForAccessToken = () => __awaiter(void 0, void 0, void 0, function* () {
            const response = yield fetch("/api/set_access_token", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8",
                },
                body: `public_token=${public_token}`,
            });
            if (!response.ok) {
                dispatch({
                    type: "SET_STATE",
                    state: {
                        itemId: `no item_id retrieved`,
                        accessToken: `no access_token retrieved`,
                        isItemAccess: false,
                    },
                });
                return;
            }
            const data = yield response.json();
            dispatch({
                type: "SET_STATE",
                state: {
                    itemId: data.item_id,
                    accessToken: data.access_token,
                    isItemAccess: true,
                },
            });
        });
        // 'payment_initiation' products do not require the public_token to be exchanged for an access_token.
        if (isPaymentInitiation) {
            dispatch({ type: "SET_STATE", state: { isItemAccess: false } });
        }
        else {
            exchangePublicTokenForAccessToken();
        }
        dispatch({ type: "SET_STATE", state: { linkSuccess: true } });
        window.history.pushState("", "", "/");
    }, [dispatch]);
    let isOauth = false;
    const config = {
        token: linkToken,
        onSuccess,
    };
    if (window.location.href.includes("?oauth_state_id=")) {
        // TODO: figure out how to delete this ts-ignore
        // @ts-ignore
        config.receivedRedirectUri = window.location.href;
        isOauth = true;
    }
    const { open, ready } = react_plaid_link_1.usePlaidLink(config);
    react_1.useEffect(() => {
        if (isOauth && ready) {
            open();
        }
    }, [ready, open, isOauth]);
    return (<Button_1.default type="button" large onClick={() => open()} disabled={!ready}>
      Launch Link
    </Button_1.default>);
};
Link.displayName = "Link";
exports.default = Link;
//# sourceMappingURL=data:application/json;base64,