"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Button_1 = __importDefault(require("plaid-threads/Button"));
const Note_1 = __importDefault(require("plaid-threads/Note"));
const Table_1 = __importDefault(require("../Table"));
const Error_1 = __importDefault(require("../Error"));
const index_module_scss_1 = __importDefault(require("./index.module.scss"));
const Endpoint = (props) => {
    const [showTable, setShowTable] = react_1.useState(false);
    const [transformedData, setTransformedData] = react_1.useState([]);
    const [pdf, setPdf] = react_1.useState(null);
    const [error, setError] = react_1.useState(null);
    const [isLoading, setIsLoading] = react_1.useState(false);
    const getData = () => __awaiter(void 0, void 0, void 0, function* () {
        setIsLoading(true);
        const response = yield fetch(`/api/${props.endpoint}`, { method: "GET" });
        const data = yield response.json();
        if (data.error != null) {
            setError(data.error);
            setIsLoading(false);
            return;
        }
        setTransformedData(props.transformData(data)); // transform data into proper format for each individual product
        if (data.pdf != null) {
            setPdf(data.pdf);
        }
        setShowTable(true);
        setIsLoading(false);
    });
    return (<>
      <div className={index_module_scss_1.default.endpointContainer}>
        <Note_1.default info className={index_module_scss_1.default.post}>
          POST
        </Note_1.default>
        <div className={index_module_scss_1.default.endpointContents}>
          <div className={index_module_scss_1.default.endpointHeader}>
            {props.name != null && (<span className={index_module_scss_1.default.endpointName}>{props.name}</span>)}
            <span className={index_module_scss_1.default.schema}>{props.schema}</span>
          </div>
          <div className={index_module_scss_1.default.endpointDescription}>{props.description}</div>
        </div>
        <div className={index_module_scss_1.default.buttonsContainer}>
          <Button_1.default small centered wide secondary className={index_module_scss_1.default.sendRequest} onClick={getData}>
            {isLoading ? "Loading..." : `Send request`}
          </Button_1.default>
          {pdf != null && (<Button_1.default small centered wide className={index_module_scss_1.default.pdf} href={`data:application/pdf;base64,${pdf}`} componentProps={{ download: "Asset Report.pdf" }}>
              Download PDF
            </Button_1.default>)}
        </div>
      </div>
      {showTable && (<Table_1.default categories={props.categories} data={transformedData} isIdentity={props.endpoint === "identity"}/>)}
      {error != null && <Error_1.default error={error}/>}
    </>);
};
Endpoint.displayName = "Endpoint";
exports.default = Endpoint;
//# sourceMappingURL=data:application/json;base64,