"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Identity_1 = __importDefault(require("./Identity"));
const index_module_scss_1 = __importDefault(require("./index.module.scss"));
const Table = (props) => {
    const maxRows = 15;
    // regular table
    const headers = props.categories.map((category, index) => (<th key={index} className={index_module_scss_1.default.headerField}>
      {category.title}
    </th>));
    const rows = props.data
        .map((item, index) => (<tr key={index} className={index_module_scss_1.default.dataRows}>
        {props.categories.map((category, index) => (<td key={index} className={index_module_scss_1.default.dataField}>
            {item[category.field]}
          </td>))}
      </tr>))
        .slice(0, maxRows);
    return props.isIdentity ? (<Identity_1.default data={props.data} categories={props.categories}/>) : (<table className={index_module_scss_1.default.dataTable}>
      <thead className={index_module_scss_1.default.header}>
        <tr className={index_module_scss_1.default.headerRow}>{headers}</tr>
      </thead>
      <tbody className={index_module_scss_1.default.body}>{rows}</tbody>
    </table>);
};
Table.displayName = "Table";
exports.default = Table;
//# sourceMappingURL=data:application/json;base64,