"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Identity_module_scss_1 = __importDefault(require("./Identity.module.scss"));
const Identity = (props) => {
    const identityHeaders = props.categories.map((category, index) => (<span key={index} className={Identity_module_scss_1.default.identityHeader}>
      {category.title}
    </span>));
    const identityRows = props.data.map((item, index) => (<div key={index} className={Identity_module_scss_1.default.identityDataRow}>
      {props.categories.map((category, index) => (<span key={index} className={Identity_module_scss_1.default.identityDataField}>
          {item[category.field]}
        </span>))}
    </div>));
    return (<div className={Identity_module_scss_1.default.identityTable}>
      <div className={Identity_module_scss_1.default.identityHeadersRow}>{identityHeaders}</div>
      <div className={Identity_module_scss_1.default.identityDataBody}>{identityRows}</div>
    </div>);
};
Identity.displayName = "Identity";
exports.default = Identity;
//# sourceMappingURL=data:application/json;base64,