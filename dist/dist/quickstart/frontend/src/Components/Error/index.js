"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Button_1 = __importDefault(require("plaid-threads/Button"));
const Note_1 = __importDefault(require("plaid-threads/Note"));
const index_module_scss_1 = __importDefault(require("./index.module.scss"));
const errorPaths = {
    ITEM_ERROR: "item",
    INSTITUTION_ERROR: "institution",
    API_ERROR: "api",
    ASSET_REPORT_ERROR: "assets",
    BANK_TRANSFER_ERROR: "bank-transfers",
    INVALID_INPUT: "invalid-input",
    INVALID_REQUEST: "invalid-request",
    INVALID_RESULT: "invalid-result",
    OAUTH_ERROR: "oauth",
    PAYMENT_ERROR: "payment",
    RATE_LIMIT_EXCEEDED: "rate-limit-exceeded",
    RECAPTCHA_ERROR: "recaptcha",
    SANDBOX_ERROR: "sandbox",
};
const Error = (props) => {
    const [path, setPath] = react_1.useState("");
    react_1.useEffect(() => {
        var _a;
        const errorType = props.error.error_type;
        const errorPath = errorPaths[errorType];
        setPath(`https://plaid.com/docs/errors/${errorPath}/#${(_a = props.error.error_code) === null || _a === void 0 ? void 0 : _a.toLowerCase()}`);
    }, [props.error]);
    return (<>
      <div className={index_module_scss_1.default.errorTop}></div>
      <div className={index_module_scss_1.default.errorContainer}>
        <Note_1.default error className={index_module_scss_1.default.code}>
          {props.error.status_code ? props.error.status_code : "error"}
        </Note_1.default>
        <div className={index_module_scss_1.default.errorContents}>
          <div className={index_module_scss_1.default.errorItem}>
            <span className={index_module_scss_1.default.errorTitle}>Error code: </span>
            <span className={index_module_scss_1.default.errorData}>
              <div className={index_module_scss_1.default.errorCode}>
                {props.error.error_code}
                <div className={index_module_scss_1.default.pinkBox}></div>
              </div>
            </span>
          </div>
          <div className={index_module_scss_1.default.errorItem}>
            <span className={index_module_scss_1.default.errorTitle}>Type: </span>
            <span className={index_module_scss_1.default.errorData}>{props.error.error_type}</span>
          </div>
          <div className={index_module_scss_1.default.errorItem}>
            <span className={index_module_scss_1.default.errorTitle}>Message: </span>
            <span className={index_module_scss_1.default.errorMessage}>
              {props.error.display_message == null
        ? props.error.error_message
        : props.error.display_message}
            </span>
          </div>
        </div>
        <Button_1.default small wide className={index_module_scss_1.default.learnMore} target="_blank" href={path}>
          Learn more
        </Button_1.default>
      </div>
    </>);
};
Error.displayName = "Error";
exports.default = Error;
//# sourceMappingURL=data:application/json;base64,