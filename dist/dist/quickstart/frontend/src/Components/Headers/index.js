"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Callout_1 = __importDefault(require("plaid-threads/Callout"));
const Button_1 = __importDefault(require("plaid-threads/Button"));
const InlineLink_1 = __importDefault(require("plaid-threads/InlineLink"));
const Link_1 = __importDefault(require("../Link"));
const Context_1 = __importDefault(require("../../Context"));
const index_module_scss_1 = __importDefault(require("./index.module.scss"));
const Header = () => {
    const { itemId, accessToken, linkToken, linkSuccess, isItemAccess, backend, linkTokenError, isPaymentInitiation, } = react_1.useContext(Context_1.default);
    return (<div className={index_module_scss_1.default.grid}>
      <h3 className={index_module_scss_1.default.title}>Plaid Quickstart</h3>

      {!linkSuccess ? (<>
          <h4 className={index_module_scss_1.default.subtitle}>
            A sample end-to-end integration with Plaid
          </h4>
          <p className={index_module_scss_1.default.introPar}>
            The Plaid flow begins when your user wants to connect their bank
            account to your app. Simulate this by clicking the button below to
            launch Link - the client-side component that your users will
            interact with in order to link their accounts to Plaid and allow you
            to access their accounts via the Plaid API.
          </p>
          
          {!backend ? (<Callout_1.default warning>
              Unable to fetch link_token: please make sure your backend server
              is running and that your .env file has been configured with your
              <code>PLAID_CLIENT_ID</code> and <code>PLAID_SECRET</code>.
            </Callout_1.default>) : /* message if backend is running and there is no link token */
        linkToken == null && backend ? (<Callout_1.default warning>
              <div>
                Unable to fetch link_token: please make sure your backend server
                is running and that your .env file has been configured
                correctly.
              </div>
              <div>
                If you are on a Windows machine, please ensure that you have
                cloned the repo with{" "}
                <InlineLink_1.default href="https://github.com/plaid/quickstart#special-instructions-for-windows" target="_blank">
                  symlinks turned on.
                </InlineLink_1.default>{" "}
                You can also try checking your{" "}
                <InlineLink_1.default href="https://dashboard.plaid.com/activity/logs" target="_blank">
                  activity log
                </InlineLink_1.default>{" "}
                on your Plaid dashboard.
              </div>
              <div>
                Error Code: <code>{linkTokenError.error_code}</code>
              </div>
              <div>
                Error Type: <code>{linkTokenError.error_type}</code>{" "}
              </div>
              <div>Error Message: {linkTokenError.error_message}</div>
            </Callout_1.default>) : linkToken === "" ? (<div className={index_module_scss_1.default.linkButton}>
              <Button_1.default large disabled>
                Loading...
              </Button_1.default>
            </div>) : (<div className={index_module_scss_1.default.linkButton}>
              <Link_1.default />
            </div>)}
        </>) : (<>
          {isPaymentInitiation ? (<>
            <h4 className={index_module_scss_1.default.subtitle}>
              Congrats! Your payment is now confirmed.
              <p />
              <Callout_1.default>
                You can see information of all your payments in the{' '}
                <InlineLink_1.default href="https://dashboard.plaid.com/activity/payments" target="_blank">
                  Payments Dashboard
                </InlineLink_1.default>
                .
              </Callout_1.default>
            </h4>
            <p className={index_module_scss_1.default.requests}>
              Now that the 'payment_id' stored in your server, you can use it to access the payment information:
            </p>
          </>) : /* If not using the payment_initiation product, show the item_id and access_token information */ (<>
            {isItemAccess ? (<h4 className={index_module_scss_1.default.subtitle}>
                  Congrats! By linking an account, you have created an{" "}
                  <InlineLink_1.default href="http://plaid.com/docs/quickstart/glossary/#item" target="_blank">
                    Item
                  </InlineLink_1.default>
                  .
                </h4>) : (<h4 className={index_module_scss_1.default.subtitle}>
                  <Callout_1.default warning>
                    Unable to create an item. Please check your backend server
                  </Callout_1.default>
                </h4>)}
            <div className={index_module_scss_1.default.itemAccessContainer}>
              <p className={index_module_scss_1.default.itemAccessRow}>
                <span className={index_module_scss_1.default.idName}>item_id</span>
                <span className={index_module_scss_1.default.tokenText}>{itemId}</span>
              </p>

              <p className={index_module_scss_1.default.itemAccessRow}>
                <span className={index_module_scss_1.default.idName}>access_token</span>
                <span className={index_module_scss_1.default.tokenText}>{accessToken}</span>
              </p>
            </div>
            {isItemAccess && (<p className={index_module_scss_1.default.requests}>
                  Now that you have an access_token, you can make all of the
                  following requests:
                </p>)}
          </>)}
        </>)}
    </div>);
};
Header.displayName = "Header";
exports.default = Header;
//# sourceMappingURL=data:application/json;base64,